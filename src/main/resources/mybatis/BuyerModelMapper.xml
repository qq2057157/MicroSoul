<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hust.microsoul.mapper.BuyerModelMapper">
  <resultMap id="BaseResultMap" type="com.hust.microsoul.model.BuyerModel">
    <id column="BUYER_ID" jdbcType="INTEGER" property="buyerId" />
    <result column="ACCOUNT_NAME" jdbcType="VARCHAR" property="accountName" />
    <result column="PASSWORD" jdbcType="VARCHAR" property="password" />
    <result column="ZHIFUBAO_ACCOUNT" jdbcType="VARCHAR" property="zhifubaoAccount" />
    <result column="EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="QQ_ACCOUNT" jdbcType="VARCHAR" property="qqAccount" />
    <result column="REAL_NAME" jdbcType="VARCHAR" property="realName" />
    <result column="ADDRESS" jdbcType="VARCHAR" property="address" />
    <result column="TELEPHONE" jdbcType="VARCHAR" property="telephone" />
    <result column="STATE" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    BUYER_ID, ACCOUNT_NAME, PASSWORD, ZHIFUBAO_ACCOUNT, EMAIL, QQ_ACCOUNT, REAL_NAME, 
    ADDRESS, TELEPHONE, STATE
  </sql>
  <select id="selectByExample" parameterType="com.hust.microsoul.model.BuyerModelExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from buyer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from buyer
    where BUYER_ID = #{buyerId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from buyer
    where BUYER_ID = #{buyerId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hust.microsoul.model.BuyerModelExample">
    delete from buyer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hust.microsoul.model.BuyerModel">
    insert into buyer (BUYER_ID, ACCOUNT_NAME, PASSWORD, 
      ZHIFUBAO_ACCOUNT, EMAIL, QQ_ACCOUNT, 
      REAL_NAME, ADDRESS, TELEPHONE, 
      STATE)
    values (#{buyerId,jdbcType=INTEGER}, #{accountName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{zhifubaoAccount,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{qqAccount,jdbcType=VARCHAR}, 
      #{realName,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hust.microsoul.model.BuyerModel">
    insert into buyer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="buyerId != null">
        BUYER_ID,
      </if>
      <if test="accountName != null">
        ACCOUNT_NAME,
      </if>
      <if test="password != null">
        PASSWORD,
      </if>
      <if test="zhifubaoAccount != null">
        ZHIFUBAO_ACCOUNT,
      </if>
      <if test="email != null">
        EMAIL,
      </if>
      <if test="qqAccount != null">
        QQ_ACCOUNT,
      </if>
      <if test="realName != null">
        REAL_NAME,
      </if>
      <if test="address != null">
        ADDRESS,
      </if>
      <if test="telephone != null">
        TELEPHONE,
      </if>
      <if test="state != null">
        STATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="buyerId != null">
        #{buyerId,jdbcType=INTEGER},
      </if>
      <if test="accountName != null">
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="zhifubaoAccount != null">
        #{zhifubaoAccount,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="qqAccount != null">
        #{qqAccount,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hust.microsoul.model.BuyerModelExample" resultType="java.lang.Long">
    select count(*) from buyer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update buyer
    <set>
      <if test="record.buyerId != null">
        BUYER_ID = #{record.buyerId,jdbcType=INTEGER},
      </if>
      <if test="record.accountName != null">
        ACCOUNT_NAME = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        PASSWORD = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.zhifubaoAccount != null">
        ZHIFUBAO_ACCOUNT = #{record.zhifubaoAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        EMAIL = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.qqAccount != null">
        QQ_ACCOUNT = #{record.qqAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.realName != null">
        REAL_NAME = #{record.realName,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        ADDRESS = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.telephone != null">
        TELEPHONE = #{record.telephone,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        STATE = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update buyer
    set BUYER_ID = #{record.buyerId,jdbcType=INTEGER},
      ACCOUNT_NAME = #{record.accountName,jdbcType=VARCHAR},
      PASSWORD = #{record.password,jdbcType=VARCHAR},
      ZHIFUBAO_ACCOUNT = #{record.zhifubaoAccount,jdbcType=VARCHAR},
      EMAIL = #{record.email,jdbcType=VARCHAR},
      QQ_ACCOUNT = #{record.qqAccount,jdbcType=VARCHAR},
      REAL_NAME = #{record.realName,jdbcType=VARCHAR},
      ADDRESS = #{record.address,jdbcType=VARCHAR},
      TELEPHONE = #{record.telephone,jdbcType=VARCHAR},
      STATE = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hust.microsoul.model.BuyerModel">
    update buyer
    <set>
      <if test="accountName != null">
        ACCOUNT_NAME = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      <if test="zhifubaoAccount != null">
        ZHIFUBAO_ACCOUNT = #{zhifubaoAccount,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="qqAccount != null">
        QQ_ACCOUNT = #{qqAccount,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        REAL_NAME = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        ADDRESS = #{address,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        TELEPHONE = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        STATE = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where BUYER_ID = #{buyerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hust.microsoul.model.BuyerModel">
    update buyer
    set ACCOUNT_NAME = #{accountName,jdbcType=VARCHAR},
      PASSWORD = #{password,jdbcType=VARCHAR},
      ZHIFUBAO_ACCOUNT = #{zhifubaoAccount,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      QQ_ACCOUNT = #{qqAccount,jdbcType=VARCHAR},
      REAL_NAME = #{realName,jdbcType=VARCHAR},
      ADDRESS = #{address,jdbcType=VARCHAR},
      TELEPHONE = #{telephone,jdbcType=VARCHAR},
      STATE = #{state,jdbcType=INTEGER}
    where BUYER_ID = #{buyerId,jdbcType=INTEGER}
  </update>
  <select id="buyerLogin" parameterType="String" resultType="String">
   select
  	 	PASSWORD
   from 
   		buyer
   where 
   		ACCOUNT_NAME= #{accountName}  
  </select>
    <insert id="buyerRegister" parameterType="com.hust.microsoul.model.BuyerModel">
    insert into buyer 
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<if test="accountName != null">
					ACCOUNT_NAME,
				</if>
				<if test="password != null">
					PASSWORD,
				</if>
				<if test="telephone!= null">
					TELEPHONE,
				</if>
				<if test="email!= null">
					EMAIL,
				</if>
					STATE,
			</trim>
			<trim prefix="values (" suffix=")" suffixOverrides=",">
				<if test="accountName != null">
					#{accountName},
				</if>
				<if test="telephone != null">
					#{password},
				</if>
				<if test="password != null">
					#{telephone},
				</if>
				<if test="email != null">
					#{email},
				</if>
					1,
			</trim>
		</insert>	
		 <select id="checkaccountName" parameterType="String" resultType="BuyerModel">
         select 
			*
   		 from 
   		 	buyer
    	 where 
    	 	ACCOUNT_NAME = #{accountName}
 		 </select>
</mapper>